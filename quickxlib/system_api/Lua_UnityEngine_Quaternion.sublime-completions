{
		"scope": "source.lua",
		"completions":
		[
	System.Single a1;
	checkType(l,2,out a1);
	System.Single a2;
	checkType(l,3,out a2);
	System.Single a3;
	checkType(l,4,out a3);
	System.Single a4;
	checkType(l,5,out a4);
			{ "trigger": "UnityEngine.Quaternion()()","contents": "UnityEngine.Quaternion()()"},

			{ "trigger": "Quaternion:Set(Public, HideBySig)","contents": "Quaternion:Set(Public, HideBySig)"},

	UnityEngine.Quaternion self;
	checkType(l,1,out self);
	System.Single a1;
	checkType(l,2,out a1);
	System.Single a2;
	checkType(l,3,out a2);
	System.Single a3;
	checkType(l,4,out a3);
	System.Single a4;
	checkType(l,5,out a4);
	self.Set(a1,a2,a3,a4);
			{ "trigger": "Quaternion:ToAngleAxis(Public, HideBySig)","contents": "Quaternion:ToAngleAxis(Public, HideBySig)"},

	UnityEngine.Quaternion self;
	checkType(l,1,out self);
	System.Single a1;
	UnityEngine.Vector3 a2;
	self.ToAngleAxis(out a1,out a2);
			{ "trigger": "Quaternion:SetFromToRotation(Public, HideBySig)","contents": "Quaternion:SetFromToRotation(Public, HideBySig)"},

	UnityEngine.Quaternion self;
	checkType(l,1,out self);
	UnityEngine.Vector3 a1;
	checkType(l,2,out a1);
	UnityEngine.Vector3 a2;
	checkType(l,3,out a2);
	self.SetFromToRotation(a1,a2);
			{ "trigger": "Quaternion:SetLookRotation(Public, HideBySig)","contents": "Quaternion:SetLookRotation(Public, HideBySig)"},

	if(argc==2){
		UnityEngine.Quaternion self;
		checkType(l,1,out self);
		UnityEngine.Vector3 a1;
		checkType(l,2,out a1);
		self.SetLookRotation(a1);
		else if(argc==3){
			UnityEngine.Quaternion self;
			checkType(l,1,out self);
			UnityEngine.Vector3 a1;
			checkType(l,2,out a1);
			UnityEngine.Vector3 a2;
			checkType(l,3,out a2);
			self.SetLookRotation(a1,a2);
					{ "trigger": "Quaternion.Dot(Public, Static, HideBySig)","contents": "Quaternion.Dot(Public, Static, HideBySig)"},

			UnityEngine.Quaternion a1;
			checkType(l,1,out a1);
			UnityEngine.Quaternion a2;
			checkType(l,2,out a2);
			var ret=UnityEngine.Quaternion.Dot(a1,a2);
					{ "trigger": "Quaternion.AngleAxis(Public, Static, HideBySig)","contents": "Quaternion.AngleAxis(Public, Static, HideBySig)"},

			System.Single a1;
			checkType(l,1,out a1);
			UnityEngine.Vector3 a2;
			checkType(l,2,out a2);
			var ret=UnityEngine.Quaternion.AngleAxis(a1,a2);
					{ "trigger": "Quaternion.FromToRotation(Public, Static, HideBySig)","contents": "Quaternion.FromToRotation(Public, Static, HideBySig)"},

			UnityEngine.Vector3 a1;
			checkType(l,1,out a1);
			UnityEngine.Vector3 a2;
			checkType(l,2,out a2);
			var ret=UnityEngine.Quaternion.FromToRotation(a1,a2);
					{ "trigger": "Quaternion.LookRotation(Public, Static, HideBySig)","contents": "Quaternion.LookRotation(Public, Static, HideBySig)"},

			if(argc==1){
				UnityEngine.Vector3 a1;
				checkType(l,1,out a1);
				var ret=UnityEngine.Quaternion.LookRotation(a1);
				else if(argc==2){
					UnityEngine.Vector3 a1;
					checkType(l,1,out a1);
					UnityEngine.Vector3 a2;
					checkType(l,2,out a2);
					var ret=UnityEngine.Quaternion.LookRotation(a1,a2);
							{ "trigger": "Quaternion.Slerp(Public, Static, HideBySig)","contents": "Quaternion.Slerp(Public, Static, HideBySig)"},

					UnityEngine.Quaternion a1;
					checkType(l,1,out a1);
					UnityEngine.Quaternion a2;
					checkType(l,2,out a2);
					System.Single a3;
					checkType(l,3,out a3);
					var ret=UnityEngine.Quaternion.Slerp(a1,a2,a3);
							{ "trigger": "Quaternion.SlerpUnclamped(Public, Static, HideBySig)","contents": "Quaternion.SlerpUnclamped(Public, Static, HideBySig)"},

					UnityEngine.Quaternion a1;
					checkType(l,1,out a1);
					UnityEngine.Quaternion a2;
					checkType(l,2,out a2);
					System.Single a3;
					checkType(l,3,out a3);
					var ret=UnityEngine.Quaternion.SlerpUnclamped(a1,a2,a3);
							{ "trigger": "Quaternion.Lerp(Public, Static, HideBySig)","contents": "Quaternion.Lerp(Public, Static, HideBySig)"},

					UnityEngine.Quaternion a1;
					checkType(l,1,out a1);
					UnityEngine.Quaternion a2;
					checkType(l,2,out a2);
					System.Single a3;
					checkType(l,3,out a3);
					var ret=UnityEngine.Quaternion.Lerp(a1,a2,a3);
							{ "trigger": "Quaternion.LerpUnclamped(Public, Static, HideBySig)","contents": "Quaternion.LerpUnclamped(Public, Static, HideBySig)"},

					UnityEngine.Quaternion a1;
					checkType(l,1,out a1);
					UnityEngine.Quaternion a2;
					checkType(l,2,out a2);
					System.Single a3;
					checkType(l,3,out a3);
					var ret=UnityEngine.Quaternion.LerpUnclamped(a1,a2,a3);
							{ "trigger": "Quaternion.RotateTowards(Public, Static, HideBySig)","contents": "Quaternion.RotateTowards(Public, Static, HideBySig)"},

					UnityEngine.Quaternion a1;
					checkType(l,1,out a1);
					UnityEngine.Quaternion a2;
					checkType(l,2,out a2);
					System.Single a3;
					checkType(l,3,out a3);
					var ret=UnityEngine.Quaternion.RotateTowards(a1,a2,a3);
							{ "trigger": "Quaternion.Inverse(Public, Static, HideBySig)","contents": "Quaternion.Inverse(Public, Static, HideBySig)"},

					UnityEngine.Quaternion a1;
					checkType(l,1,out a1);
					var ret=UnityEngine.Quaternion.Inverse(a1);
							{ "trigger": "Quaternion.Angle(Public, Static, HideBySig)","contents": "Quaternion.Angle(Public, Static, HideBySig)"},

					UnityEngine.Quaternion a1;
					checkType(l,1,out a1);
					UnityEngine.Quaternion a2;
					checkType(l,2,out a2);
					var ret=UnityEngine.Quaternion.Angle(a1,a2);
							{ "trigger": "Quaternion.Euler(Public, Static, HideBySig)","contents": "Quaternion.Euler(Public, Static, HideBySig)"},

					if(argc==1){
						UnityEngine.Vector3 a1;
						checkType(l,1,out a1);
						var ret=UnityEngine.Quaternion.Euler(a1);
						else if(argc==3){
							System.Single a1;
							checkType(l,1,out a1);
							System.Single a2;
							checkType(l,2,out a2);
							System.Single a3;
							checkType(l,3,out a3);
							var ret=UnityEngine.Quaternion.Euler(a1,a2,a3);
									{ "trigger": "Quaternion.op_Multiply(Public, Static, HideBySig, SpecialName)","contents": "Quaternion.op_Multiply(Public, Static, HideBySig, SpecialName)"},

							if(matchType(l,argc,1,UnityEngine.Quaternion,UnityEngine.Vector3)){
								UnityEngine.Quaternion a1;
								checkType(l,1,out a1);
								UnityEngine.Vector3 a2;
								checkType(l,2,out a2);
								var ret=a1*a2;
								else if(matchType(l,argc,1,UnityEngine.Quaternion,UnityEngine.Quaternion)){
									UnityEngine.Quaternion a1;
									checkType(l,1,out a1);
									UnityEngine.Quaternion a2;
									checkType(l,2,out a2);
									var ret=a1*a2;
											{ "trigger": "Quaternion.op_Equality(Public, Static, HideBySig, SpecialName)","contents": "Quaternion.op_Equality(Public, Static, HideBySig, SpecialName)"},

									UnityEngine.Quaternion a1;
									checkType(l,1,out a1);
									UnityEngine.Quaternion a2;
									checkType(l,2,out a2);
									var ret=(a1==a2);
											{ "trigger": "Quaternion.op_Inequality(Public, Static, HideBySig, SpecialName)","contents": "Quaternion.op_Inequality(Public, Static, HideBySig, SpecialName)"},

									UnityEngine.Quaternion a1;
									checkType(l,1,out a1);
									UnityEngine.Quaternion a2;
									checkType(l,2,out a2);
									var ret=(a1!=a2);
									kEpsilon
									x
									set_x(IntPtr l) {
										UnityEngine.Quaternion self;
										checkType(l,1,out self);
										System.Single v;
										checkType(l,2,out v);
										self.x=v;
										y
										set_y(IntPtr l) {
											UnityEngine.Quaternion self;
											checkType(l,1,out self);
											System.Single v;
											checkType(l,2,out v);
											self.y=v;
											z
											set_z(IntPtr l) {
												UnityEngine.Quaternion self;
												checkType(l,1,out self);
												System.Single v;
												checkType(l,2,out v);
												self.z=v;
												w
												set_w(IntPtr l) {
													UnityEngine.Quaternion self;
													checkType(l,1,out self);
													System.Single v;
													checkType(l,2,out v);
													self.w=v;
													get_identity(IntPtr l) {
														get_eulerAngles(IntPtr l) {
															set_eulerAngles(IntPtr l) {
																UnityEngine.Quaternion self;
																checkType(l,1,out self);
																UnityEngine.Vector3 v;
																checkType(l,2,out v);
																self.eulerAngles=v;
																setBack(l,self);
																UnityEngine.Quaternion self;
																checkType(l,1,out self);
																int v;
																checkType(l,2,out v);
																UnityEngine.Quaternion self;
																checkType(l,1,out self);
																int v;
																checkType(l,2,out v);
																float c;
																checkType(l,3,out c);
																	]
															}

