{
		"scope": "source.lua",
		"completions":
		[
			{ "trigger": "UnityEngine.Texture2DArray()()","contents": "UnityEngine.Texture2DArray()()"},

	System.Int32 a1;
	checkType(l,2,out a1);
	System.Int32 a2;
	checkType(l,3,out a2);
	System.Int32 a3;
	checkType(l,4,out a3);
	UnityEngine.TextureFormat a4;
	checkEnum(l,5,out a4);
	System.Boolean a5;
	checkType(l,6,out a5);
			{ "trigger": "UnityEngine.Texture2DArray()()","contents": "UnityEngine.Texture2DArray()()"},

			{ "trigger": "UnityEngine.Texture2DArray()()","contents": "UnityEngine.Texture2DArray()()"},

	System.Int32 a1;
	checkType(l,2,out a1);
	System.Int32 a2;
	checkType(l,3,out a2);
	System.Int32 a3;
	checkType(l,4,out a3);
	UnityEngine.TextureFormat a4;
	checkEnum(l,5,out a4);
	System.Boolean a5;
	checkType(l,6,out a5);
	System.Boolean a6;
	checkType(l,7,out a6);
			{ "trigger": "UnityEngine.Texture2DArray()()","contents": "UnityEngine.Texture2DArray()()"},

			{ "trigger": "Texture2DArray:Apply(Public, HideBySig)","contents": "Texture2DArray:Apply(Public, HideBySig)"},

	if(argc==1){
		UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
		self.Apply();
		else if(argc==2){
			UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
			System.Boolean a1;
			checkType(l,2,out a1);
			self.Apply(a1);
			else if(argc==3){
				UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
				System.Boolean a1;
				checkType(l,2,out a1);
				System.Boolean a2;
				checkType(l,3,out a2);
				self.Apply(a1,a2);
						{ "trigger": "Texture2DArray:SetPixels(Public, HideBySig)","contents": "Texture2DArray:SetPixels(Public, HideBySig)"},

				if(argc==3){
					UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
					UnityEngine.Color[] a1;
					checkArray(l,2,out a1);
					System.Int32 a2;
					checkType(l,3,out a2);
					self.SetPixels(a1,a2);
					else if(argc==4){
						UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
						UnityEngine.Color[] a1;
						checkArray(l,2,out a1);
						System.Int32 a2;
						checkType(l,3,out a2);
						System.Int32 a3;
						checkType(l,4,out a3);
						self.SetPixels(a1,a2,a3);
								{ "trigger": "Texture2DArray:SetPixels32(Public, HideBySig)","contents": "Texture2DArray:SetPixels32(Public, HideBySig)"},

						if(argc==3){
							UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
							UnityEngine.Color32[] a1;
							checkArray(l,2,out a1);
							System.Int32 a2;
							checkType(l,3,out a2);
							self.SetPixels32(a1,a2);
							else if(argc==4){
								UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
								UnityEngine.Color32[] a1;
								checkArray(l,2,out a1);
								System.Int32 a2;
								checkType(l,3,out a2);
								System.Int32 a3;
								checkType(l,4,out a3);
								self.SetPixels32(a1,a2,a3);
										{ "trigger": "Texture2DArray:GetPixels(Public, HideBySig)","contents": "Texture2DArray:GetPixels(Public, HideBySig)"},

								if(argc==2){
									UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
									System.Int32 a1;
									checkType(l,2,out a1);
									var ret=self.GetPixels(a1);
									else if(argc==3){
										UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
										System.Int32 a1;
										checkType(l,2,out a1);
										System.Int32 a2;
										checkType(l,3,out a2);
										var ret=self.GetPixels(a1,a2);
												{ "trigger": "Texture2DArray:GetPixels32(Public, HideBySig)","contents": "Texture2DArray:GetPixels32(Public, HideBySig)"},

										if(argc==2){
											UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
											System.Int32 a1;
											checkType(l,2,out a1);
											var ret=self.GetPixels32(a1);
											else if(argc==3){
												UnityEngine.Texture2DArray self=(UnityEngine.Texture2DArray)checkSelf(l);
												System.Int32 a1;
												checkType(l,2,out a1);
												System.Int32 a2;
												checkType(l,3,out a2);
												var ret=self.GetPixels32(a1,a2);
												get_depth(IntPtr l) {
													get_format(IntPtr l) {
															]
													}

