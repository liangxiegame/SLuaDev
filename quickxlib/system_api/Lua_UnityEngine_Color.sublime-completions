{
		"scope": "source.lua",
		"completions":
		[
			{ "trigger": "UnityEngine.Color()()","contents": "UnityEngine.Color()()"},

	System.Single a1;
	checkType(l,2,out a1);
	System.Single a2;
	checkType(l,3,out a2);
	System.Single a3;
	checkType(l,4,out a3);
	System.Single a4;
	checkType(l,5,out a4);
			{ "trigger": "UnityEngine.Color()()","contents": "UnityEngine.Color()()"},

			{ "trigger": "UnityEngine.Color()()","contents": "UnityEngine.Color()()"},

	System.Single a1;
	checkType(l,2,out a1);
	System.Single a2;
	checkType(l,3,out a2);
	System.Single a3;
	checkType(l,4,out a3);
			{ "trigger": "UnityEngine.Color()()","contents": "UnityEngine.Color()()"},

			{ "trigger": "UnityEngine.Color()()","contents": "UnityEngine.Color()()"},

			{ "trigger": "Color.Lerp(Public, Static, HideBySig)","contents": "Color.Lerp(Public, Static, HideBySig)"},

	UnityEngine.Color a1;
	checkType(l,1,out a1);
	UnityEngine.Color a2;
	checkType(l,2,out a2);
	System.Single a3;
	checkType(l,3,out a3);
	var ret=UnityEngine.Color.Lerp(a1,a2,a3);
			{ "trigger": "Color.LerpUnclamped(Public, Static, HideBySig)","contents": "Color.LerpUnclamped(Public, Static, HideBySig)"},

	UnityEngine.Color a1;
	checkType(l,1,out a1);
	UnityEngine.Color a2;
	checkType(l,2,out a2);
	System.Single a3;
	checkType(l,3,out a3);
	var ret=UnityEngine.Color.LerpUnclamped(a1,a2,a3);
			{ "trigger": "Color.RGBToHSV(Public, Static, HideBySig)","contents": "Color.RGBToHSV(Public, Static, HideBySig)"},

	UnityEngine.Color a1;
	checkType(l,1,out a1);
	System.Single a2;
	System.Single a3;
	System.Single a4;
	UnityEngine.Color.RGBToHSV(a1,out a2,out a3,out a4);
			{ "trigger": "Color.HSVToRGB(Public, Static, HideBySig)","contents": "Color.HSVToRGB(Public, Static, HideBySig)"},

	if(argc==3){
		System.Single a1;
		checkType(l,1,out a1);
		System.Single a2;
		checkType(l,2,out a2);
		System.Single a3;
		checkType(l,3,out a3);
		var ret=UnityEngine.Color.HSVToRGB(a1,a2,a3);
		else if(argc==4){
			System.Single a1;
			checkType(l,1,out a1);
			System.Single a2;
			checkType(l,2,out a2);
			System.Single a3;
			checkType(l,3,out a3);
			System.Boolean a4;
			checkType(l,4,out a4);
			var ret=UnityEngine.Color.HSVToRGB(a1,a2,a3,a4);
					{ "trigger": "Color.op_Addition(Public, Static, HideBySig, SpecialName)","contents": "Color.op_Addition(Public, Static, HideBySig, SpecialName)"},

			UnityEngine.Color a1;
			checkType(l,1,out a1);
			UnityEngine.Color a2;
			checkType(l,2,out a2);
			var ret=a1+a2;
					{ "trigger": "Color.op_Subtraction(Public, Static, HideBySig, SpecialName)","contents": "Color.op_Subtraction(Public, Static, HideBySig, SpecialName)"},

			UnityEngine.Color a1;
			checkType(l,1,out a1);
			UnityEngine.Color a2;
			checkType(l,2,out a2);
			var ret=a1-a2;
					{ "trigger": "Color.op_Multiply(Public, Static, HideBySig, SpecialName)","contents": "Color.op_Multiply(Public, Static, HideBySig, SpecialName)"},

			if(matchType(l,argc,1,float,UnityEngine.Color)){
				System.Single a1;
				checkType(l,1,out a1);
				UnityEngine.Color a2;
				checkType(l,2,out a2);
				var ret=a1*a2;
				else if(matchType(l,argc,1,UnityEngine.Color,float)){
					UnityEngine.Color a1;
					checkType(l,1,out a1);
					System.Single a2;
					checkType(l,2,out a2);
					var ret=a1*a2;
					else if(matchType(l,argc,1,UnityEngine.Color,UnityEngine.Color)){
						UnityEngine.Color a1;
						checkType(l,1,out a1);
						UnityEngine.Color a2;
						checkType(l,2,out a2);
						var ret=a1*a2;
								{ "trigger": "Color.op_Division(Public, Static, HideBySig, SpecialName)","contents": "Color.op_Division(Public, Static, HideBySig, SpecialName)"},

						UnityEngine.Color a1;
						checkType(l,1,out a1);
						System.Single a2;
						checkType(l,2,out a2);
						var ret=a1/a2;
								{ "trigger": "Color.op_Equality(Public, Static, HideBySig, SpecialName)","contents": "Color.op_Equality(Public, Static, HideBySig, SpecialName)"},

						UnityEngine.Color a1;
						checkType(l,1,out a1);
						UnityEngine.Color a2;
						checkType(l,2,out a2);
						var ret=(a1==a2);
								{ "trigger": "Color.op_Inequality(Public, Static, HideBySig, SpecialName)","contents": "Color.op_Inequality(Public, Static, HideBySig, SpecialName)"},

						UnityEngine.Color a1;
						checkType(l,1,out a1);
						UnityEngine.Color a2;
						checkType(l,2,out a2);
						var ret=(a1!=a2);
						r
						set_r(IntPtr l) {
							UnityEngine.Color self;
							checkType(l,1,out self);
							System.Single v;
							checkType(l,2,out v);
							self.r=v;
							g
							set_g(IntPtr l) {
								UnityEngine.Color self;
								checkType(l,1,out self);
								System.Single v;
								checkType(l,2,out v);
								self.g=v;
								b
								set_b(IntPtr l) {
									UnityEngine.Color self;
									checkType(l,1,out self);
									System.Single v;
									checkType(l,2,out v);
									self.b=v;
									a
									set_a(IntPtr l) {
										UnityEngine.Color self;
										checkType(l,1,out self);
										System.Single v;
										checkType(l,2,out v);
										self.a=v;
										get_red(IntPtr l) {
											get_green(IntPtr l) {
												get_blue(IntPtr l) {
													get_white(IntPtr l) {
														get_black(IntPtr l) {
															get_yellow(IntPtr l) {
																get_cyan(IntPtr l) {
																	get_magenta(IntPtr l) {
																		get_gray(IntPtr l) {
																			get_grey(IntPtr l) {
																				get_clear(IntPtr l) {
																					get_grayscale(IntPtr l) {
																						get_linear(IntPtr l) {
																							get_gamma(IntPtr l) {
																								get_maxColorComponent(IntPtr l) {
																									UnityEngine.Color self;
																									checkType(l,1,out self);
																									int v;
																									checkType(l,2,out v);
																									UnityEngine.Color self;
																									checkType(l,1,out self);
																									int v;
																									checkType(l,2,out v);
																									float c;
																									checkType(l,3,out c);
																										]
																								}

