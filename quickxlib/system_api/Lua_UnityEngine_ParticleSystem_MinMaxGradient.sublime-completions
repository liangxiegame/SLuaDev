{
		"scope": "source.lua",
		"completions":
		[
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient(,UnityEngine.Color)()","contents": "UnityEngine.ParticleSystem.MinMaxGradient(,UnityEngine.Color)()"},

	UnityEngine.Color a1;
	checkType(l,2,out a1);
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient()()","contents": "UnityEngine.ParticleSystem.MinMaxGradient()()"},

			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient(,UnityEngine.Gradient)()","contents": "UnityEngine.ParticleSystem.MinMaxGradient(,UnityEngine.Gradient)()"},

	UnityEngine.Gradient a1;
	checkType(l,2,out a1);
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient()()","contents": "UnityEngine.ParticleSystem.MinMaxGradient()()"},

			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient(,UnityEngine.Color,UnityEngine.Color)()","contents": "UnityEngine.ParticleSystem.MinMaxGradient(,UnityEngine.Color,UnityEngine.Color)()"},

	UnityEngine.Color a1;
	checkType(l,2,out a1);
	UnityEngine.Color a2;
	checkType(l,3,out a2);
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient()()","contents": "UnityEngine.ParticleSystem.MinMaxGradient()()"},

			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient(,UnityEngine.Gradient,UnityEngine.Gradient)()","contents": "UnityEngine.ParticleSystem.MinMaxGradient(,UnityEngine.Gradient,UnityEngine.Gradient)()"},

	UnityEngine.Gradient a1;
	checkType(l,2,out a1);
	UnityEngine.Gradient a2;
	checkType(l,3,out a2);
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient()()","contents": "UnityEngine.ParticleSystem.MinMaxGradient()()"},

			{ "trigger": "UnityEngine.ParticleSystem.MinMaxGradient()()","contents": "UnityEngine.ParticleSystem.MinMaxGradient()()"},

			{ "trigger": "MinMaxGradient:Evaluate(Public, HideBySig)","contents": "MinMaxGradient:Evaluate(Public, HideBySig)"},

	if(argc==2){
		UnityEngine.ParticleSystem.MinMaxGradient self;
		checkValueType(l,1,out self);
		System.Single a1;
		checkType(l,2,out a1);
		var ret=self.Evaluate(a1);
		else if(argc==3){
			UnityEngine.ParticleSystem.MinMaxGradient self;
			checkValueType(l,1,out self);
			System.Single a1;
			checkType(l,2,out a1);
			System.Single a2;
			checkType(l,3,out a2);
			var ret=self.Evaluate(a1,a2);
			get_mode(IntPtr l) {
				set_mode(IntPtr l) {
					UnityEngine.ParticleSystem.MinMaxGradient self;
					checkValueType(l,1,out self);
					UnityEngine.ParticleSystemGradientMode v;
					checkEnum(l,2,out v);
					self.mode=v;
					setBack(l,self);
					get_gradientMax(IntPtr l) {
						set_gradientMax(IntPtr l) {
							UnityEngine.ParticleSystem.MinMaxGradient self;
							checkValueType(l,1,out self);
							UnityEngine.Gradient v;
							checkType(l,2,out v);
							self.gradientMax=v;
							setBack(l,self);
							get_gradientMin(IntPtr l) {
								set_gradientMin(IntPtr l) {
									UnityEngine.ParticleSystem.MinMaxGradient self;
									checkValueType(l,1,out self);
									UnityEngine.Gradient v;
									checkType(l,2,out v);
									self.gradientMin=v;
									setBack(l,self);
									get_colorMax(IntPtr l) {
										set_colorMax(IntPtr l) {
											UnityEngine.ParticleSystem.MinMaxGradient self;
											checkValueType(l,1,out self);
											UnityEngine.Color v;
											checkType(l,2,out v);
											self.colorMax=v;
											setBack(l,self);
											get_colorMin(IntPtr l) {
												set_colorMin(IntPtr l) {
													UnityEngine.ParticleSystem.MinMaxGradient self;
													checkValueType(l,1,out self);
													UnityEngine.Color v;
													checkType(l,2,out v);
													self.colorMin=v;
													setBack(l,self);
													get_color(IntPtr l) {
														set_color(IntPtr l) {
															UnityEngine.ParticleSystem.MinMaxGradient self;
															checkValueType(l,1,out self);
															UnityEngine.Color v;
															checkType(l,2,out v);
															self.color=v;
															setBack(l,self);
															get_gradient(IntPtr l) {
																set_gradient(IntPtr l) {
																	UnityEngine.ParticleSystem.MinMaxGradient self;
																	checkValueType(l,1,out self);
																	UnityEngine.Gradient v;
																	checkType(l,2,out v);
																	self.gradient=v;
																	setBack(l,self);
																		]
																}

