{
		"scope": "source.lua",
		"completions":
		[
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve()()","contents": "UnityEngine.ParticleSystem.MinMaxCurve()()"},

	System.Single a1;
	checkType(l,2,out a1);
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve()()","contents": "UnityEngine.ParticleSystem.MinMaxCurve()()"},

			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve(,float,UnityEngine.AnimationCurve)()","contents": "UnityEngine.ParticleSystem.MinMaxCurve(,float,UnityEngine.AnimationCurve)()"},

	System.Single a1;
	checkType(l,2,out a1);
	UnityEngine.AnimationCurve a2;
	checkType(l,3,out a2);
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve()()","contents": "UnityEngine.ParticleSystem.MinMaxCurve()()"},

			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve()()","contents": "UnityEngine.ParticleSystem.MinMaxCurve()()"},

	System.Single a1;
	checkType(l,2,out a1);
	UnityEngine.AnimationCurve a2;
	checkType(l,3,out a2);
	UnityEngine.AnimationCurve a3;
	checkType(l,4,out a3);
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve()()","contents": "UnityEngine.ParticleSystem.MinMaxCurve()()"},

			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve(,float,float)()","contents": "UnityEngine.ParticleSystem.MinMaxCurve(,float,float)()"},

	System.Single a1;
	checkType(l,2,out a1);
	System.Single a2;
	checkType(l,3,out a2);
			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve()()","contents": "UnityEngine.ParticleSystem.MinMaxCurve()()"},

			{ "trigger": "UnityEngine.ParticleSystem.MinMaxCurve()()","contents": "UnityEngine.ParticleSystem.MinMaxCurve()()"},

			{ "trigger": "MinMaxCurve:Evaluate(Public, HideBySig)","contents": "MinMaxCurve:Evaluate(Public, HideBySig)"},

	if(argc==2){
		UnityEngine.ParticleSystem.MinMaxCurve self;
		checkValueType(l,1,out self);
		System.Single a1;
		checkType(l,2,out a1);
		var ret=self.Evaluate(a1);
		else if(argc==3){
			UnityEngine.ParticleSystem.MinMaxCurve self;
			checkValueType(l,1,out self);
			System.Single a1;
			checkType(l,2,out a1);
			System.Single a2;
			checkType(l,3,out a2);
			var ret=self.Evaluate(a1,a2);
			get_mode(IntPtr l) {
				set_mode(IntPtr l) {
					UnityEngine.ParticleSystem.MinMaxCurve self;
					checkValueType(l,1,out self);
					UnityEngine.ParticleSystemCurveMode v;
					checkEnum(l,2,out v);
					self.mode=v;
					setBack(l,self);
					get_curveScalar(IntPtr l) {
						set_curveScalar(IntPtr l) {
							UnityEngine.ParticleSystem.MinMaxCurve self;
							checkValueType(l,1,out self);
							float v;
							checkType(l,2,out v);
							self.curveScalar=v;
							setBack(l,self);
							get_curveMax(IntPtr l) {
								set_curveMax(IntPtr l) {
									UnityEngine.ParticleSystem.MinMaxCurve self;
									checkValueType(l,1,out self);
									UnityEngine.AnimationCurve v;
									checkType(l,2,out v);
									self.curveMax=v;
									setBack(l,self);
									get_curveMin(IntPtr l) {
										set_curveMin(IntPtr l) {
											UnityEngine.ParticleSystem.MinMaxCurve self;
											checkValueType(l,1,out self);
											UnityEngine.AnimationCurve v;
											checkType(l,2,out v);
											self.curveMin=v;
											setBack(l,self);
											get_constantMax(IntPtr l) {
												set_constantMax(IntPtr l) {
													UnityEngine.ParticleSystem.MinMaxCurve self;
													checkValueType(l,1,out self);
													float v;
													checkType(l,2,out v);
													self.constantMax=v;
													setBack(l,self);
													get_constantMin(IntPtr l) {
														set_constantMin(IntPtr l) {
															UnityEngine.ParticleSystem.MinMaxCurve self;
															checkValueType(l,1,out self);
															float v;
															checkType(l,2,out v);
															self.constantMin=v;
															setBack(l,self);
															get_constant(IntPtr l) {
																set_constant(IntPtr l) {
																	UnityEngine.ParticleSystem.MinMaxCurve self;
																	checkValueType(l,1,out self);
																	float v;
																	checkType(l,2,out v);
																	self.constant=v;
																	setBack(l,self);
																	get_curve(IntPtr l) {
																		set_curve(IntPtr l) {
																			UnityEngine.ParticleSystem.MinMaxCurve self;
																			checkValueType(l,1,out self);
																			UnityEngine.AnimationCurve v;
																			checkType(l,2,out v);
																			self.curve=v;
																			setBack(l,self);
																				]
																		}

