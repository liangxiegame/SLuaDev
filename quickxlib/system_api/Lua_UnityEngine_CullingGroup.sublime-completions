{
		"scope": "source.lua",
		"completions":
		[
			{ "trigger": "UnityEngine.CullingGroup()()","contents": "UnityEngine.CullingGroup()()"},

			{ "trigger": "CullingGroup:Dispose(Public, Final, Virtual, HideBySig, VtableLayoutMask)","contents": "CullingGroup:Dispose(Public, Final, Virtual, HideBySig, VtableLayoutMask)"},

	UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
	self.Dispose();
			{ "trigger": "CullingGroup:SetBoundingSpheres(Public, HideBySig)","contents": "CullingGroup:SetBoundingSpheres(Public, HideBySig)"},

	UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
	UnityEngine.BoundingSphere[] a1;
	checkArray(l,2,out a1);
	self.SetBoundingSpheres(a1);
			{ "trigger": "CullingGroup:SetBoundingSphereCount(Public, HideBySig)","contents": "CullingGroup:SetBoundingSphereCount(Public, HideBySig)"},

	UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
	System.Int32 a1;
	checkType(l,2,out a1);
	self.SetBoundingSphereCount(a1);
			{ "trigger": "CullingGroup:EraseSwapBack(Public, HideBySig)","contents": "CullingGroup:EraseSwapBack(Public, HideBySig)"},

	UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
	System.Int32 a1;
	checkType(l,2,out a1);
	self.EraseSwapBack(a1);
			{ "trigger": "CullingGroup:QueryIndices(Public, HideBySig)","contents": "CullingGroup:QueryIndices(Public, HideBySig)"},

	if(matchType(l,argc,2,int,System.Int32[],int)){
		UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
		System.Int32 a1;
		checkType(l,2,out a1);
		System.Int32[] a2;
		checkArray(l,3,out a2);
		System.Int32 a3;
		checkType(l,4,out a3);
		var ret=self.QueryIndices(a1,a2,a3);
		else if(matchType(l,argc,2,bool,System.Int32[],int)){
			UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
			System.Boolean a1;
			checkType(l,2,out a1);
			System.Int32[] a2;
			checkArray(l,3,out a2);
			System.Int32 a3;
			checkType(l,4,out a3);
			var ret=self.QueryIndices(a1,a2,a3);
			else if(argc==5){
				UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
				System.Boolean a1;
				checkType(l,2,out a1);
				System.Int32 a2;
				checkType(l,3,out a2);
				System.Int32[] a3;
				checkArray(l,4,out a3);
				System.Int32 a4;
				checkType(l,5,out a4);
				var ret=self.QueryIndices(a1,a2,a3,a4);
						{ "trigger": "CullingGroup:IsVisible(Public, HideBySig)","contents": "CullingGroup:IsVisible(Public, HideBySig)"},

				UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
				System.Int32 a1;
				checkType(l,2,out a1);
				var ret=self.IsVisible(a1);
						{ "trigger": "CullingGroup:GetDistance(Public, HideBySig)","contents": "CullingGroup:GetDistance(Public, HideBySig)"},

				UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
				System.Int32 a1;
				checkType(l,2,out a1);
				var ret=self.GetDistance(a1);
						{ "trigger": "CullingGroup:SetBoundingDistances(Public, HideBySig)","contents": "CullingGroup:SetBoundingDistances(Public, HideBySig)"},

				UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
				System.Single[] a1;
				checkArray(l,2,out a1);
				self.SetBoundingDistances(a1);
						{ "trigger": "CullingGroup:SetDistanceReferencePoint(Public, HideBySig)","contents": "CullingGroup:SetDistanceReferencePoint(Public, HideBySig)"},

				if(matchType(l,argc,2,UnityEngine.Transform)){
					UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
					UnityEngine.Transform a1;
					checkType(l,2,out a1);
					self.SetDistanceReferencePoint(a1);
					else if(matchType(l,argc,2,UnityEngine.Vector3)){
						UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
						UnityEngine.Vector3 a1;
						checkType(l,2,out a1);
						self.SetDistanceReferencePoint(a1);
						set_onStateChanged(IntPtr l) {
							UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
							UnityEngine.CullingGroup.StateChanged v;
							int op=LuaDelegation.checkDelegate(l,2,out v);
							if(op==0) self.onStateChanged=v;
							else if(op==1) self.onStateChanged+=v;
							else if(op==2) self.onStateChanged-=v;
							get_enabled(IntPtr l) {
								set_enabled(IntPtr l) {
									UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
									bool v;
									checkType(l,2,out v);
									self.enabled=v;
									get_targetCamera(IntPtr l) {
										set_targetCamera(IntPtr l) {
											UnityEngine.CullingGroup self=(UnityEngine.CullingGroup)checkSelf(l);
											UnityEngine.Camera v;
											checkType(l,2,out v);
											self.targetCamera=v;
												]
										}

