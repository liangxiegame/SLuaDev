{
		"scope": "source.lua",
		"completions":
		[
			{ "trigger": "UnityEngine.Caching()()","contents": "UnityEngine.Caching()()"},

			{ "trigger": "Caching.Authorize(Public, Static, HideBySig)","contents": "Caching.Authorize(Public, Static, HideBySig)"},

	if(argc==4){
		System.String a1;
		checkType(l,1,out a1);
		System.String a2;
		checkType(l,2,out a2);
		System.Int64 a3;
		checkType(l,3,out a3);
		System.String a4;
		checkType(l,4,out a4);
		var ret=UnityEngine.Caching.Authorize(a1,a2,a3,a4);
		else if(argc==5){
			System.String a1;
			checkType(l,1,out a1);
			System.String a2;
			checkType(l,2,out a2);
			System.Int64 a3;
			checkType(l,3,out a3);
			System.Int32 a4;
			checkType(l,4,out a4);
			System.String a5;
			checkType(l,5,out a5);
			var ret=UnityEngine.Caching.Authorize(a1,a2,a3,a4,a5);
					{ "trigger": "Caching.CleanCache(Public, Static, HideBySig)","contents": "Caching.CleanCache(Public, Static, HideBySig)"},

			var ret=UnityEngine.Caching.CleanCache();
					{ "trigger": "Caching.IsVersionCached(Public, Static, HideBySig)","contents": "Caching.IsVersionCached(Public, Static, HideBySig)"},

			if(matchType(l,argc,1,string,UnityEngine.Hash128)){
				System.String a1;
				checkType(l,1,out a1);
				UnityEngine.Hash128 a2;
				checkValueType(l,2,out a2);
				var ret=UnityEngine.Caching.IsVersionCached(a1,a2);
				else if(matchType(l,argc,1,string,int)){
					System.String a1;
					checkType(l,1,out a1);
					System.Int32 a2;
					checkType(l,2,out a2);
					var ret=UnityEngine.Caching.IsVersionCached(a1,a2);
							{ "trigger": "Caching.MarkAsUsed(Public, Static, HideBySig)","contents": "Caching.MarkAsUsed(Public, Static, HideBySig)"},

					if(matchType(l,argc,1,string,UnityEngine.Hash128)){
						System.String a1;
						checkType(l,1,out a1);
						UnityEngine.Hash128 a2;
						checkValueType(l,2,out a2);
						var ret=UnityEngine.Caching.MarkAsUsed(a1,a2);
						else if(matchType(l,argc,1,string,int)){
							System.String a1;
							checkType(l,1,out a1);
							System.Int32 a2;
							checkType(l,2,out a2);
							var ret=UnityEngine.Caching.MarkAsUsed(a1,a2);
							get_spaceFree(IntPtr l) {
								get_maximumAvailableDiskSpace(IntPtr l) {
									set_maximumAvailableDiskSpace(IntPtr l) {
										System.Int64 v;
										checkType(l,2,out v);
										UnityEngine.Caching.maximumAvailableDiskSpace=v;
										get_spaceOccupied(IntPtr l) {
											get_expirationDelay(IntPtr l) {
												set_expirationDelay(IntPtr l) {
													int v;
													checkType(l,2,out v);
													UnityEngine.Caching.expirationDelay=v;
													get_enabled(IntPtr l) {
														set_enabled(IntPtr l) {
															bool v;
															checkType(l,2,out v);
															UnityEngine.Caching.enabled=v;
															get_compressionEnabled(IntPtr l) {
																set_compressionEnabled(IntPtr l) {
																	bool v;
																	checkType(l,2,out v);
																	UnityEngine.Caching.compressionEnabled=v;
																	get_ready(IntPtr l) {
																			]
																	}

