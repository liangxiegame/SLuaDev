{
		"scope": "source.lua",
		"completions":
		[
			{ "trigger": "AudioMixer:FindMatchingGroups(Public, HideBySig)","contents": "AudioMixer:FindMatchingGroups(Public, HideBySig)"},

	UnityEngine.Audio.AudioMixer self=(UnityEngine.Audio.AudioMixer)checkSelf(l);
	System.String a1;
	checkType(l,2,out a1);
	var ret=self.FindMatchingGroups(a1);
			{ "trigger": "AudioMixer:FindSnapshot(Public, HideBySig)","contents": "AudioMixer:FindSnapshot(Public, HideBySig)"},

	UnityEngine.Audio.AudioMixer self=(UnityEngine.Audio.AudioMixer)checkSelf(l);
	System.String a1;
	checkType(l,2,out a1);
	var ret=self.FindSnapshot(a1);
			{ "trigger": "AudioMixer:TransitionToSnapshots(Public, HideBySig)","contents": "AudioMixer:TransitionToSnapshots(Public, HideBySig)"},

	UnityEngine.Audio.AudioMixer self=(UnityEngine.Audio.AudioMixer)checkSelf(l);
	UnityEngine.Audio.AudioMixerSnapshot[] a1;
	checkArray(l,2,out a1);
	System.Single[] a2;
	checkArray(l,3,out a2);
	System.Single a3;
	checkType(l,4,out a3);
	self.TransitionToSnapshots(a1,a2,a3);
			{ "trigger": "AudioMixer:SetFloat(Public, HideBySig)","contents": "AudioMixer:SetFloat(Public, HideBySig)"},

	UnityEngine.Audio.AudioMixer self=(UnityEngine.Audio.AudioMixer)checkSelf(l);
	System.String a1;
	checkType(l,2,out a1);
	System.Single a2;
	checkType(l,3,out a2);
	var ret=self.SetFloat(a1,a2);
			{ "trigger": "AudioMixer:ClearFloat(Public, HideBySig)","contents": "AudioMixer:ClearFloat(Public, HideBySig)"},

	UnityEngine.Audio.AudioMixer self=(UnityEngine.Audio.AudioMixer)checkSelf(l);
	System.String a1;
	checkType(l,2,out a1);
	var ret=self.ClearFloat(a1);
			{ "trigger": "AudioMixer:GetFloat(Public, HideBySig)","contents": "AudioMixer:GetFloat(Public, HideBySig)"},

	UnityEngine.Audio.AudioMixer self=(UnityEngine.Audio.AudioMixer)checkSelf(l);
	System.String a1;
	checkType(l,2,out a1);
	System.Single a2;
	var ret=self.GetFloat(a1,out a2);
	get_outputAudioMixerGroup(IntPtr l) {
		set_outputAudioMixerGroup(IntPtr l) {
			UnityEngine.Audio.AudioMixer self=(UnityEngine.Audio.AudioMixer)checkSelf(l);
			UnityEngine.Audio.AudioMixerGroup v;
			checkType(l,2,out v);
			self.outputAudioMixerGroup=v;
			get_updateMode(IntPtr l) {
				set_updateMode(IntPtr l) {
					UnityEngine.Audio.AudioMixer self=(UnityEngine.Audio.AudioMixer)checkSelf(l);
					UnityEngine.Audio.AudioMixerUpdateMode v;
					checkEnum(l,2,out v);
					self.updateMode=v;
						]
				}

