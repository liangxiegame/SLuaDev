{
		"scope": "source.lua",
		"completions":
		[
			{ "trigger": "UnityEngine.CanvasRenderer()()","contents": "UnityEngine.CanvasRenderer()()"},

			{ "trigger": "CanvasRenderer:SetColor(Public, HideBySig)","contents": "CanvasRenderer:SetColor(Public, HideBySig)"},

	UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
	UnityEngine.Color a1;
	checkType(l,2,out a1);
	self.SetColor(a1);
			{ "trigger": "CanvasRenderer:GetColor(Public, HideBySig)","contents": "CanvasRenderer:GetColor(Public, HideBySig)"},

	UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
	var ret=self.GetColor();
			{ "trigger": "CanvasRenderer:GetAlpha(Public, HideBySig)","contents": "CanvasRenderer:GetAlpha(Public, HideBySig)"},

	UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
	var ret=self.GetAlpha();
			{ "trigger": "CanvasRenderer:SetAlpha(Public, HideBySig)","contents": "CanvasRenderer:SetAlpha(Public, HideBySig)"},

	UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
	System.Single a1;
	checkType(l,2,out a1);
	self.SetAlpha(a1);
			{ "trigger": "CanvasRenderer:EnableRectClipping(Public, HideBySig)","contents": "CanvasRenderer:EnableRectClipping(Public, HideBySig)"},

	UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
	UnityEngine.Rect a1;
	checkValueType(l,2,out a1);
	self.EnableRectClipping(a1);
			{ "trigger": "CanvasRenderer:DisableRectClipping(Public, HideBySig)","contents": "CanvasRenderer:DisableRectClipping(Public, HideBySig)"},

	UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
	self.DisableRectClipping();
			{ "trigger": "CanvasRenderer:SetMaterial(Public, HideBySig)","contents": "CanvasRenderer:SetMaterial(Public, HideBySig)"},

	if(matchType(l,argc,2,UnityEngine.Material,UnityEngine.Texture)){
		UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
		UnityEngine.Material a1;
		checkType(l,2,out a1);
		UnityEngine.Texture a2;
		checkType(l,3,out a2);
		self.SetMaterial(a1,a2);
		else if(matchType(l,argc,2,UnityEngine.Material,int)){
			UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
			UnityEngine.Material a1;
			checkType(l,2,out a1);
			System.Int32 a2;
			checkType(l,3,out a2);
			self.SetMaterial(a1,a2);
					{ "trigger": "CanvasRenderer:GetMaterial(Public, HideBySig)","contents": "CanvasRenderer:GetMaterial(Public, HideBySig)"},

			if(argc==1){
				UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
				var ret=self.GetMaterial();
				else if(argc==2){
					UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
					System.Int32 a1;
					checkType(l,2,out a1);
					var ret=self.GetMaterial(a1);
							{ "trigger": "CanvasRenderer:SetPopMaterial(Public, HideBySig)","contents": "CanvasRenderer:SetPopMaterial(Public, HideBySig)"},

					UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
					UnityEngine.Material a1;
					checkType(l,2,out a1);
					System.Int32 a2;
					checkType(l,3,out a2);
					self.SetPopMaterial(a1,a2);
							{ "trigger": "CanvasRenderer:GetPopMaterial(Public, HideBySig)","contents": "CanvasRenderer:GetPopMaterial(Public, HideBySig)"},

					UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
					System.Int32 a1;
					checkType(l,2,out a1);
					var ret=self.GetPopMaterial(a1);
							{ "trigger": "CanvasRenderer:SetTexture(Public, HideBySig)","contents": "CanvasRenderer:SetTexture(Public, HideBySig)"},

					UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
					UnityEngine.Texture a1;
					checkType(l,2,out a1);
					self.SetTexture(a1);
							{ "trigger": "CanvasRenderer:SetAlphaTexture(Public, HideBySig)","contents": "CanvasRenderer:SetAlphaTexture(Public, HideBySig)"},

					UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
					UnityEngine.Texture a1;
					checkType(l,2,out a1);
					self.SetAlphaTexture(a1);
							{ "trigger": "CanvasRenderer:SetMesh(Public, HideBySig)","contents": "CanvasRenderer:SetMesh(Public, HideBySig)"},

					UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
					UnityEngine.Mesh a1;
					checkType(l,2,out a1);
					self.SetMesh(a1);
							{ "trigger": "CanvasRenderer:Clear(Public, HideBySig)","contents": "CanvasRenderer:Clear(Public, HideBySig)"},

					UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
					self.Clear();
							{ "trigger": "CanvasRenderer.SplitUIVertexStreams(Public, Static, HideBySig)","contents": "CanvasRenderer.SplitUIVertexStreams(Public, Static, HideBySig)"},

					System.Collections.Generic.List<UnityEngine.UIVertex> a1;
					checkType(l,1,out a1);
					System.Collections.Generic.List<UnityEngine.Vector3> a2;
					checkType(l,2,out a2);
					System.Collections.Generic.List<UnityEngine.Color32> a3;
					checkType(l,3,out a3);
					System.Collections.Generic.List<UnityEngine.Vector2> a4;
					checkType(l,4,out a4);
					System.Collections.Generic.List<UnityEngine.Vector2> a5;
					checkType(l,5,out a5);
					System.Collections.Generic.List<UnityEngine.Vector3> a6;
					checkType(l,6,out a6);
					System.Collections.Generic.List<UnityEngine.Vector4> a7;
					checkType(l,7,out a7);
					System.Collections.Generic.List<System.Int32> a8;
					checkType(l,8,out a8);
					UnityEngine.CanvasRenderer.SplitUIVertexStreams(a1,a2,a3,a4,a5,a6,a7,a8);
							{ "trigger": "CanvasRenderer.CreateUIVertexStream(Public, Static, HideBySig)","contents": "CanvasRenderer.CreateUIVertexStream(Public, Static, HideBySig)"},

					System.Collections.Generic.List<UnityEngine.UIVertex> a1;
					checkType(l,1,out a1);
					System.Collections.Generic.List<UnityEngine.Vector3> a2;
					checkType(l,2,out a2);
					System.Collections.Generic.List<UnityEngine.Color32> a3;
					checkType(l,3,out a3);
					System.Collections.Generic.List<UnityEngine.Vector2> a4;
					checkType(l,4,out a4);
					System.Collections.Generic.List<UnityEngine.Vector2> a5;
					checkType(l,5,out a5);
					System.Collections.Generic.List<UnityEngine.Vector3> a6;
					checkType(l,6,out a6);
					System.Collections.Generic.List<UnityEngine.Vector4> a7;
					checkType(l,7,out a7);
					System.Collections.Generic.List<System.Int32> a8;
					checkType(l,8,out a8);
					UnityEngine.CanvasRenderer.CreateUIVertexStream(a1,a2,a3,a4,a5,a6,a7,a8);
							{ "trigger": "CanvasRenderer.AddUIVertexStream(Public, Static, HideBySig)","contents": "CanvasRenderer.AddUIVertexStream(Public, Static, HideBySig)"},

					System.Collections.Generic.List<UnityEngine.UIVertex> a1;
					checkType(l,1,out a1);
					System.Collections.Generic.List<UnityEngine.Vector3> a2;
					checkType(l,2,out a2);
					System.Collections.Generic.List<UnityEngine.Color32> a3;
					checkType(l,3,out a3);
					System.Collections.Generic.List<UnityEngine.Vector2> a4;
					checkType(l,4,out a4);
					System.Collections.Generic.List<UnityEngine.Vector2> a5;
					checkType(l,5,out a5);
					System.Collections.Generic.List<UnityEngine.Vector3> a6;
					checkType(l,6,out a6);
					System.Collections.Generic.List<UnityEngine.Vector4> a7;
					checkType(l,7,out a7);
					UnityEngine.CanvasRenderer.AddUIVertexStream(a1,a2,a3,a4,a5,a6,a7);
					get_hasRectClipping(IntPtr l) {
						get_hasPopInstruction(IntPtr l) {
							set_hasPopInstruction(IntPtr l) {
								UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
								bool v;
								checkType(l,2,out v);
								self.hasPopInstruction=v;
								get_materialCount(IntPtr l) {
									set_materialCount(IntPtr l) {
										UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
										int v;
										checkType(l,2,out v);
										self.materialCount=v;
										get_popMaterialCount(IntPtr l) {
											set_popMaterialCount(IntPtr l) {
												UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
												int v;
												checkType(l,2,out v);
												self.popMaterialCount=v;
												get_relativeDepth(IntPtr l) {
													get_cull(IntPtr l) {
														set_cull(IntPtr l) {
															UnityEngine.CanvasRenderer self=(UnityEngine.CanvasRenderer)checkSelf(l);
															bool v;
															checkType(l,2,out v);
															self.cull=v;
															get_absoluteDepth(IntPtr l) {
																get_hasMoved(IntPtr l) {
																		]
																}

