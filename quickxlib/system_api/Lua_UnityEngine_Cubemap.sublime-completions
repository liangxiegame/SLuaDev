{
		"scope": "source.lua",
		"completions":
		[
	System.Int32 a1;
	checkType(l,2,out a1);
	UnityEngine.TextureFormat a2;
	checkEnum(l,3,out a2);
	System.Boolean a3;
	checkType(l,4,out a3);
			{ "trigger": "UnityEngine.Cubemap()()","contents": "UnityEngine.Cubemap()()"},

			{ "trigger": "Cubemap:SetPixel(Public, HideBySig)","contents": "Cubemap:SetPixel(Public, HideBySig)"},

	UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
	UnityEngine.CubemapFace a1;
	checkEnum(l,2,out a1);
	System.Int32 a2;
	checkType(l,3,out a2);
	System.Int32 a3;
	checkType(l,4,out a3);
	UnityEngine.Color a4;
	checkType(l,5,out a4);
	self.SetPixel(a1,a2,a3,a4);
			{ "trigger": "Cubemap:GetPixel(Public, HideBySig)","contents": "Cubemap:GetPixel(Public, HideBySig)"},

	UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
	UnityEngine.CubemapFace a1;
	checkEnum(l,2,out a1);
	System.Int32 a2;
	checkType(l,3,out a2);
	System.Int32 a3;
	checkType(l,4,out a3);
	var ret=self.GetPixel(a1,a2,a3);
			{ "trigger": "Cubemap:GetPixels(Public, HideBySig)","contents": "Cubemap:GetPixels(Public, HideBySig)"},

	if(argc==2){
		UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
		UnityEngine.CubemapFace a1;
		checkEnum(l,2,out a1);
		var ret=self.GetPixels(a1);
		else if(argc==3){
			UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
			UnityEngine.CubemapFace a1;
			checkEnum(l,2,out a1);
			System.Int32 a2;
			checkType(l,3,out a2);
			var ret=self.GetPixels(a1,a2);
					{ "trigger": "Cubemap:SetPixels(Public, HideBySig)","contents": "Cubemap:SetPixels(Public, HideBySig)"},

			if(argc==3){
				UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
				UnityEngine.Color[] a1;
				checkArray(l,2,out a1);
				UnityEngine.CubemapFace a2;
				checkEnum(l,3,out a2);
				self.SetPixels(a1,a2);
				else if(argc==4){
					UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
					UnityEngine.Color[] a1;
					checkArray(l,2,out a1);
					UnityEngine.CubemapFace a2;
					checkEnum(l,3,out a2);
					System.Int32 a3;
					checkType(l,4,out a3);
					self.SetPixels(a1,a2,a3);
							{ "trigger": "Cubemap:Apply(Public, HideBySig)","contents": "Cubemap:Apply(Public, HideBySig)"},

					if(argc==1){
						UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
						self.Apply();
						else if(argc==2){
							UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
							System.Boolean a1;
							checkType(l,2,out a1);
							self.Apply(a1);
							else if(argc==3){
								UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
								System.Boolean a1;
								checkType(l,2,out a1);
								System.Boolean a2;
								checkType(l,3,out a2);
								self.Apply(a1,a2);
										{ "trigger": "Cubemap:SmoothEdges(Public, HideBySig)","contents": "Cubemap:SmoothEdges(Public, HideBySig)"},

								if(argc==1){
									UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
									self.SmoothEdges();
									else if(argc==2){
										UnityEngine.Cubemap self=(UnityEngine.Cubemap)checkSelf(l);
										System.Int32 a1;
										checkType(l,2,out a1);
										self.SmoothEdges(a1);
										get_mipmapCount(IntPtr l) {
											get_format(IntPtr l) {
													]
											}

